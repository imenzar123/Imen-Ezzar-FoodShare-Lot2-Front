/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllUsers } from '../fn/user-controller/get-all-users';
import { GetAllUsers$Params } from '../fn/user-controller/get-all-users';
import { getAllUsers1 } from '../fn/user-controller/get-all-users-1';
import { GetAllUsers1$Params } from '../fn/user-controller/get-all-users-1';
import { getMyProfile } from '../fn/user-controller/get-my-profile';
import { GetMyProfile$Params } from '../fn/user-controller/get-my-profile';
import { getUserStats } from '../fn/user-controller/get-user-stats';
import { GetUserStats$Params } from '../fn/user-controller/get-user-stats';
import { updateMyProfile } from '../fn/user-controller/update-my-profile';
import { UpdateMyProfile$Params } from '../fn/user-controller/update-my-profile';
import { User } from '../models/user';
import { UserProfileResponse } from '../models/user-profile-response';
import { UserResponse } from '../models/user-response';
import { UserStatsResponse } from '../models/user-stats-response';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMyProfile()` */
  static readonly GetMyProfilePath = '/api/v1/users/me/profile';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyProfile()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyProfile$Response(params?: GetMyProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<UserProfileResponse>> {
    return getMyProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyProfile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyProfile(params?: GetMyProfile$Params, context?: HttpContext): Observable<UserProfileResponse> {
    return this.getMyProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserProfileResponse>): UserProfileResponse => r.body)
    );
  }

  /** Path part for operation `updateMyProfile()` */
  static readonly UpdateMyProfilePath = '/api/v1/users/me/profile';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMyProfile()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMyProfile$Response(params: UpdateMyProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<UserProfileResponse>> {
    return updateMyProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMyProfile$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMyProfile(params: UpdateMyProfile$Params, context?: HttpContext): Observable<UserProfileResponse> {
    return this.updateMyProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserProfileResponse>): UserProfileResponse => r.body)
    );
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/api/v1/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<Array<User>> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body)
    );
  }

  /** Path part for operation `getUserStats()` */
  static readonly GetUserStatsPath = '/api/v1/users/me/stats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserStats$Response(params?: GetUserStats$Params, context?: HttpContext): Observable<StrictHttpResponse<UserStatsResponse>> {
    return getUserStats(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserStats(params?: GetUserStats$Params, context?: HttpContext): Observable<UserStatsResponse> {
    return this.getUserStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserStatsResponse>): UserStatsResponse => r.body)
    );
  }

  /** Path part for operation `getAllUsers1()` */
  static readonly GetAllUsers1Path = '/api/v1/users/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers1$Response(params?: GetAllUsers1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return getAllUsers1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers1(params?: GetAllUsers1$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.getAllUsers1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

}
