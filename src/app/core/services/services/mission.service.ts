/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { acceptMission } from '../fn/mission/accept-mission';
import { AcceptMission$Params } from '../fn/mission/accept-mission';
import { assignUser } from '../fn/mission/assign-user';
import { AssignUser$Params } from '../fn/mission/assign-user';
import { completeMission } from '../fn/mission/complete-mission';
import { CompleteMission$Params } from '../fn/mission/complete-mission';
import { createMission } from '../fn/mission/create-mission';
import { CreateMission$Params } from '../fn/mission/create-mission';
import { deleteMission } from '../fn/mission/delete-mission';
import { DeleteMission$Params } from '../fn/mission/delete-mission';
import { desacceptMission } from '../fn/mission/desaccept-mission';
import { DesacceptMission$Params } from '../fn/mission/desaccept-mission';
import { getAllMissions } from '../fn/mission/get-all-missions';
import { GetAllMissions$Params } from '../fn/mission/get-all-missions';
import { getInProgressOrCompletedMissions } from '../fn/mission/get-in-progress-or-completed-missions';
import { GetInProgressOrCompletedMissions$Params } from '../fn/mission/get-in-progress-or-completed-missions';
import { getMissionById } from '../fn/mission/get-mission-by-id';
import { GetMissionById$Params } from '../fn/mission/get-mission-by-id';
import { getMissions } from '../fn/mission/get-missions';
import { GetMissions$Params } from '../fn/mission/get-missions';
import { getPendingMissions } from '../fn/mission/get-pending-missions';
import { GetPendingMissions$Params } from '../fn/mission/get-pending-missions';
import { MissionResponse } from '../models/mission-response';
import { PageResponseMissionResponse } from '../models/page-response-mission-response';
import { unassignUser } from '../fn/mission/unassign-user';
import { UnassignUser$Params } from '../fn/mission/unassign-user';
import { updateMission } from '../fn/mission/update-mission';
import { UpdateMission$Params } from '../fn/mission/update-mission';

@Injectable({ providedIn: 'root' })
export class MissionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `unassignUser()` */
  static readonly UnassignUserPath = '/api/missions/{missionId}/unassign';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unassignUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  unassignUser$Response(params: UnassignUser$Params, context?: HttpContext): Observable<StrictHttpResponse<MissionResponse>> {
    return unassignUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unassignUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unassignUser(params: UnassignUser$Params, context?: HttpContext): Observable<MissionResponse> {
    return this.unassignUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<MissionResponse>): MissionResponse => r.body)
    );
  }

  /** Path part for operation `desacceptMission()` */
  static readonly DesacceptMissionPath = '/api/missions/{missionId}/desaccept';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `desacceptMission()` instead.
   *
   * This method doesn't expect any request body.
   */
  desacceptMission$Response(params: DesacceptMission$Params, context?: HttpContext): Observable<StrictHttpResponse<MissionResponse>> {
    return desacceptMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `desacceptMission$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  desacceptMission(params: DesacceptMission$Params, context?: HttpContext): Observable<MissionResponse> {
    return this.desacceptMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<MissionResponse>): MissionResponse => r.body)
    );
  }

  /** Path part for operation `completeMission()` */
  static readonly CompleteMissionPath = '/api/missions/{missionId}/complete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `completeMission()` instead.
   *
   * This method doesn't expect any request body.
   */
  completeMission$Response(params: CompleteMission$Params, context?: HttpContext): Observable<StrictHttpResponse<MissionResponse>> {
    return completeMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `completeMission$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  completeMission(params: CompleteMission$Params, context?: HttpContext): Observable<MissionResponse> {
    return this.completeMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<MissionResponse>): MissionResponse => r.body)
    );
  }

  /** Path part for operation `assignUser()` */
  static readonly AssignUserPath = '/api/missions/{missionId}/assign/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignUser$Response(params: AssignUser$Params, context?: HttpContext): Observable<StrictHttpResponse<MissionResponse>> {
    return assignUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignUser(params: AssignUser$Params, context?: HttpContext): Observable<MissionResponse> {
    return this.assignUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<MissionResponse>): MissionResponse => r.body)
    );
  }

  /** Path part for operation `acceptMission()` */
  static readonly AcceptMissionPath = '/api/missions/{missionId}/accept';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `acceptMission()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptMission$Response(params: AcceptMission$Params, context?: HttpContext): Observable<StrictHttpResponse<MissionResponse>> {
    return acceptMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `acceptMission$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptMission(params: AcceptMission$Params, context?: HttpContext): Observable<MissionResponse> {
    return this.acceptMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<MissionResponse>): MissionResponse => r.body)
    );
  }

  /** Path part for operation `getMissionById()` */
  static readonly GetMissionByIdPath = '/api/missions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMissionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMissionById$Response(params: GetMissionById$Params, context?: HttpContext): Observable<StrictHttpResponse<MissionResponse>> {
    return getMissionById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMissionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMissionById(params: GetMissionById$Params, context?: HttpContext): Observable<MissionResponse> {
    return this.getMissionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<MissionResponse>): MissionResponse => r.body)
    );
  }

  /** Path part for operation `updateMission()` */
  static readonly UpdateMissionPath = '/api/missions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMission()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMission$Response(params: UpdateMission$Params, context?: HttpContext): Observable<StrictHttpResponse<MissionResponse>> {
    return updateMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMission$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMission(params: UpdateMission$Params, context?: HttpContext): Observable<MissionResponse> {
    return this.updateMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<MissionResponse>): MissionResponse => r.body)
    );
  }

  /** Path part for operation `deleteMission()` */
  static readonly DeleteMissionPath = '/api/missions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMission()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMission$Response(params: DeleteMission$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMission$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMission(params: DeleteMission$Params, context?: HttpContext): Observable<void> {
    return this.deleteMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMissions()` */
  static readonly GetMissionsPath = '/api/missions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMissions$Response(params?: GetMissions$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMissionResponse>> {
    return getMissions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMissions(params?: GetMissions$Params, context?: HttpContext): Observable<PageResponseMissionResponse> {
    return this.getMissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMissionResponse>): PageResponseMissionResponse => r.body)
    );
  }

  /** Path part for operation `createMission()` */
  static readonly CreateMissionPath = '/api/missions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMission()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMission$Response(params: CreateMission$Params, context?: HttpContext): Observable<StrictHttpResponse<MissionResponse>> {
    return createMission(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMission$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMission(params: CreateMission$Params, context?: HttpContext): Observable<MissionResponse> {
    return this.createMission$Response(params, context).pipe(
      map((r: StrictHttpResponse<MissionResponse>): MissionResponse => r.body)
    );
  }

  /** Path part for operation `getInProgressOrCompletedMissions()` */
  static readonly GetInProgressOrCompletedMissionsPath = '/api/missions/user/progress-completed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInProgressOrCompletedMissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInProgressOrCompletedMissions$Response(params?: GetInProgressOrCompletedMissions$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMissionResponse>> {
    return getInProgressOrCompletedMissions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInProgressOrCompletedMissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInProgressOrCompletedMissions(params?: GetInProgressOrCompletedMissions$Params, context?: HttpContext): Observable<PageResponseMissionResponse> {
    return this.getInProgressOrCompletedMissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMissionResponse>): PageResponseMissionResponse => r.body)
    );
  }

  /** Path part for operation `getPendingMissions()` */
  static readonly GetPendingMissionsPath = '/api/missions/user/pending';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPendingMissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingMissions$Response(params?: GetPendingMissions$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMissionResponse>> {
    return getPendingMissions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPendingMissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingMissions(params?: GetPendingMissions$Params, context?: HttpContext): Observable<PageResponseMissionResponse> {
    return this.getPendingMissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMissionResponse>): PageResponseMissionResponse => r.body)
    );
  }

  /** Path part for operation `getAllMissions()` */
  static readonly GetAllMissionsPath = '/api/missions/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMissions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMissions$Response(params?: GetAllMissions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MissionResponse>>> {
    return getAllMissions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMissions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMissions(params?: GetAllMissions$Params, context?: HttpContext): Observable<Array<MissionResponse>> {
    return this.getAllMissions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MissionResponse>>): Array<MissionResponse> => r.body)
    );
  }

}
