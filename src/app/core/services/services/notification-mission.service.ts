/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteAllUserNotifications } from '../fn/notification-mission/delete-all-user-notifications';
import { DeleteAllUserNotifications$Params } from '../fn/notification-mission/delete-all-user-notifications';
import { deleteNotification } from '../fn/notification-mission/delete-notification';
import { DeleteNotification$Params } from '../fn/notification-mission/delete-notification';
import { getAllNotifications } from '../fn/notification-mission/get-all-notifications';
import { GetAllNotifications$Params } from '../fn/notification-mission/get-all-notifications';
import { getUnreadCount } from '../fn/notification-mission/get-unread-count';
import { GetUnreadCount$Params } from '../fn/notification-mission/get-unread-count';
import { getUnreadNotifications } from '../fn/notification-mission/get-unread-notifications';
import { GetUnreadNotifications$Params } from '../fn/notification-mission/get-unread-notifications';
import { markAllAsRead } from '../fn/notification-mission/mark-all-as-read';
import { MarkAllAsRead$Params } from '../fn/notification-mission/mark-all-as-read';
import { markAsRead } from '../fn/notification-mission/mark-as-read';
import { MarkAsRead$Params } from '../fn/notification-mission/mark-as-read';
import { NotificationMission } from '../models/notification-mission';

@Injectable({ providedIn: 'root' })
export class NotificationMissionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `markAsRead()` */
  static readonly MarkAsReadPath = '/api/notifications/read/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsRead$Response(params: MarkAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return markAsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsRead(params: MarkAsRead$Params, context?: HttpContext): Observable<void> {
    return this.markAsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `markAllAsRead()` */
  static readonly MarkAllAsReadPath = '/api/notifications/read-all/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markAllAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAllAsRead$Response(params: MarkAllAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return markAllAsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markAllAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAllAsRead(params: MarkAllAsRead$Params, context?: HttpContext): Observable<void> {
    return this.markAllAsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllNotifications()` */
  static readonly GetAllNotificationsPath = '/api/notifications/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllNotifications()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNotifications$Response(params: GetAllNotifications$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NotificationMission>>> {
    return getAllNotifications(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllNotifications$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNotifications(params: GetAllNotifications$Params, context?: HttpContext): Observable<Array<NotificationMission>> {
    return this.getAllNotifications$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NotificationMission>>): Array<NotificationMission> => r.body)
    );
  }

  /** Path part for operation `deleteAllUserNotifications()` */
  static readonly DeleteAllUserNotificationsPath = '/api/notifications/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllUserNotifications()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllUserNotifications$Response(params: DeleteAllUserNotifications$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllUserNotifications(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllUserNotifications$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllUserNotifications(params: DeleteAllUserNotifications$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllUserNotifications$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getUnreadNotifications()` */
  static readonly GetUnreadNotificationsPath = '/api/notifications/user/{userId}/unread';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnreadNotifications()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadNotifications$Response(params: GetUnreadNotifications$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NotificationMission>>> {
    return getUnreadNotifications(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnreadNotifications$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadNotifications(params: GetUnreadNotifications$Params, context?: HttpContext): Observable<Array<NotificationMission>> {
    return this.getUnreadNotifications$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NotificationMission>>): Array<NotificationMission> => r.body)
    );
  }

  /** Path part for operation `getUnreadCount()` */
  static readonly GetUnreadCountPath = '/api/notifications/unread/count/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnreadCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadCount$Response(params: GetUnreadCount$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getUnreadCount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnreadCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadCount(params: GetUnreadCount$Params, context?: HttpContext): Observable<number> {
    return this.getUnreadCount$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteNotification()` */
  static readonly DeleteNotificationPath = '/api/notifications/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteNotification()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNotification$Response(params: DeleteNotification$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteNotification(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteNotification$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNotification(params: DeleteNotification$Params, context?: HttpContext): Observable<void> {
    return this.deleteNotification$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
